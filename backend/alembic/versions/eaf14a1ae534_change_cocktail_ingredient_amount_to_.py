"""change_cocktail_ingredient_amount_to_integer

Revision ID: eaf14a1ae534
Revises: a29be19d9d88
Create Date: 2025-05-21 23:05:28.881697

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'eaf14a1ae534'
down_revision: Union[str, None] = 'a29be19d9d88'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - START ADJUSTMENT ###
    
    # Operacje na tabeli 'cocktail_ingredients'
    with op.batch_alter_table('cocktail_ingredients', schema=None) as batch_op:
        batch_op.alter_column('amount',
               existing_type=sa.VARCHAR(), # Lub sa.String(), zależnie od tego, co było w modelu
               type_=sa.Integer(),
               existing_nullable=False)

    # Operacje na tabeli 'cocktails'
    with op.batch_alter_table('cocktails', schema=None) as batch_op:
        # Sprawdź, czy stary indeks istniał, zanim go usuniesz.
        # W niektórych przypadkach, jeśli indeks jest częścią klucza obcego lub innego ograniczenia,
        # drop_index może się nie udać. Ale dla prostego indeksu powinno być OK.
        # Jeśli ix_cocktails_name był zwykłym indeksem, to jest OK.
        # Jeśli był częścią UNIQUE constraint, to create_unique_constraint jest lepsze.
        # Ale skoro Alembic wygenerował drop_index i create_index, trzymajmy się tego.
        try:
            batch_op.drop_index('ix_cocktails_name')
        except sa.exc.OperationalError as e:
            # Ignoruj błąd, jeśli indeks nie istnieje (częste w SQLite)
            # lub jeśli jest to błąd związany z tym, że indeks jest częścią ograniczenia (mniej prawdopodobne tutaj)
            print(f"Could not drop index ix_cocktails_name, it might not exist or be part of a constraint: {e}")
            pass
        batch_op.create_index(op.f('ix_cocktails_name'), ['name'], unique=True) # `op.f` jest do nazywania constraintów/indeksów

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - START ADJUSTMENT ###

    # Operacje na tabeli 'cocktails' (odwrócenie)
    with op.batch_alter_table('cocktails', schema=None) as batch_op:
        batch_op.drop_index(op.f('ix_cocktails_name')) # `op.f` jest tutaj ważne
        batch_op.create_index('ix_cocktails_name', ['name'], unique=False) # Stary indeks bez unique

    # Operacje na tabeli 'cocktail_ingredients' (odwrócenie)
    with op.batch_alter_table('cocktail_ingredients', schema=None) as batch_op:
        batch_op.alter_column('amount',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(), # Lub sa.String()
               existing_nullable=False)

    # ### end Alembic commands ###